module mobl::ui::generic

import mobl::ui::stylemixin

load mobl/ui/generic_ext.css
/*
load mobl/ui/generic/css-beziers.js
load mobl/ui/generic/touchscroll.js
load mobl/ui/generic/touchscroll.css*/

//resource mobl/ui/generic/arrow.png
//resource mobl/ui/generic/contextmenu.png
//resource mobl/ui/generic/loading-large.gif

style $baseColor = rgb(72, 100, 180)
style $baseColorGreen = rgb(60, 150, 30)
style $baseColorRed = rgb(150, 50, 20)
style $baseColorRedish = rgb(150, 80, 0)

style $buttonFromColor = rgb($baseColor.r+170, $baseColor.g+170, $baseColor.b+170)
style $buttonToColor = rgb($baseColor.r+120, $baseColor.g+120, $baseColor.b + 120)
style $buttonPushedFromColor = rgb($baseColor.r+100, $baseColor.g+100, $baseColor.b+100)
style $buttonPushedToColor = rgb($baseColor.r+50, $baseColor.g+50, $baseColor.b+50)
style $textButtonColor = rgb($baseColor.r~50, $baseColor.g~50, $baseColor.b~50)
style $textButtonShadowColor = rgb($baseColor.r+100, $baseColor.g+100, $baseColor.b+100)


style loadingStyle {
  borderRadiusMixin(10px);
  background-color: #000;
  color: white;
  font-size: 2em;
  line-height: 2em;
  font-weight: bold;
  left: 10%;
  margin: 0 auto;
  position: fixed;
  text-align: center;
  top: 40%;
  width: 80%;
  z-index: 99;
}

control whenLoaded(value : Object, style : Style = loadingStyle, loadingMessage : String = "Loading...") {
  when(value) {
    elements()
  } else {
    block(style) {
      label(loadingMessage)
      image($data(mobl/ui/generic/loading-large.gif), valign="middle")
    }
  }
}

style headerStyle {
  backgroundGradientMixin($baseColor, rgb($baseColor.r~40, $baseColor.g~40, $baseColor.b~40));
  padding: 0;
  height: 2.3em;
  font-size: 1.3em;
  line-height: 2.3em;
  font-weight: bold;
  text-align: center;
  text-shadow: #477 0px 1px 1px;
  color: white;
  font-weight: bold;
  margin: 0;
  z-index: 2;
  width: 100%;
}

style headerContainerStyle {
  width: 150px;
  position: absolute;
  left: 50%;
}

style headerTextStyle {
  position: absolute;
  left: -75px;
  width: 150px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

control header(text : String, fixedPosition : Bool = false, onclick : Callback = null) {
  <div class=headerStyle onclick=onclick style=fixedPosition ? "position:fixed;" : null>
    <div class=headerContainerStyle><div databind=text class=headerTextStyle/></div>
    elements()
  </div>
  // And a div to take its place (so that we won't overlap the top part of the screen)
  when(fixedPosition) {
    <div id="hello" style="height: 2.9em;"/>
  }
}

style mixin buttonMixin($fromColor, $toColor) {
  font-family: Arial, Helvetica, sans-serif;
  text-shadow: $textButtonShadowColor 0px 1px 0px;
  font-weight: bold;
  text-align: center;
  padding: 0.5em 1em 0.5em 1em;
  margin: 0.3em;
  line-height: 3em;
  color: $textButtonColor;
  boxShadowMixin(0px, 0px, 3px, #777777);
  borderRadiusMixin(5px);
  backgroundGradientMixin($fromColor, $toColor);
}

style buttonStyle {
  buttonMixin($buttonFromColor, $buttonToColor);
}

style buttonPushedStyle {
  buttonMixin($buttonPushedFromColor, $buttonPushedToColor);
}

style headerStyle buttonStyle {
  float: right;
  font-size: 0.7em;
  line-height: 2em;
  padding: 0.2em 1em 0.2em 1em;
  margin-top: 0.5em;
  margin-left: 0;
  margin-right: 0.4em;
  z-index: 3;
}

style headerStyle buttonPushedStyle {
  float: right;
  font-size: 0.7em;
  line-height: 2em;
  padding: 0.2em 1em 0.2em 1em;
  margin-top: 0.5em;
  margin-left: 0;
  margin-right: 0.4em;
  z-index: 3;
}

control button(text : String, style : Style = buttonStyle, pushedStyle : Style = buttonPushedStyle, onclick : Callback = {}) {
  var pushed = false
  sp@<span class=pushed ? pushedStyle : style ontouchdown={
    event.preventDefault();
    pushed = true;
  }
  ontouchdrag={
    if(event.y < 0 || event.y > sp.outerHeight() || event.x < 0 || event.x > sp.outerWidth()) {
      pushed = false;
    }
  }
  ontouchup={
    if(pushed) {
      pushed = false;
      onclick(event);
    }
  } onmouseout={
    if(pushed) {
      pushed = false;
    }
  }
  databind=text/>
}


style mixin sideButtonMixin($fromColor, $toColor) {
  float: right;
  padding: 0.25em 0.8em 0.25em 0.8em;
  margin-top: -0.2em;
  margin-bottom: -0.2em;
  margin-left: 0.5em;
  font-weight: bold;
  color: $textButtonColor;
  boxShadowMixin(0px, 0px, 3px, #777777);
  borderRadiusMixin(5px);
  backgroundGradientMixin($fromColor, $toColor);
}

style sideButtonStyle {
  sideButtonMixin($buttonFromColor, $buttonToColor);
}

style sideButtonPushedStyle {
  sideButtonMixin($buttonPushedFromColor, $buttonPushedToColor);
}

control sideButton(text : String, style : Style = sideButtonStyle, pushedStyle : Style = sideButtonPushedStyle, onclick : Callback = {}) {
  button(text, style=style, pushedStyle=pushedStyle, onclick=onclick)
}

style mixin backButtonMixin($fromColor, $toColor) {
  float: left;
  borderRadiusMixin(5px);
  backgroundGradientMixin($fromColor, $toColor);
  boxShadowMixin(0, 0, 3px, #777777);
  padding: 0.2em 0.8em 0.2em 0.8em;
  line-height: 2em;
  margin-top: 0.5em;
  margin-left: 0.3em;
  font-size: 0.7em;
  font-weight: bold;
  color: $textButtonColor;
  text-shadow: $textButtonShadowColor 0px 1px 0px;
  z-index: 3;
}

style backButtonStyle {
  backButtonMixin($buttonFromColor, $buttonToColor);
}

style backButtonPushedStyle {
  backButtonMixin($buttonPushedFromColor, $buttonPushedToColor);
}

style backButtonStyle:before {
  content: "\00ab\00a0";
}

style backButtonPushedStyle:before {
  content: "\00ab\00a0";
}

control backButton(text : String = _("Back"), style : Style = backButtonStyle, pushedStyle : Style = backButtonPushedStyle, onclick : Callback = { screen return; }) {
  button(text, style=style, pushedStyle=pushedStyle, onclick=onclick)
}

style groupStyle {
  list-style: none;
  margin: 0;
  padding: 0;
}

control group() {
  <ul class=groupStyle>
    elements()
  </ul>
}

control image(url : String, width : Num = null, height : Num = null, onclick : Callback = null, style : Style = null, valign : String = null, align : String = null) {
  <img src=url width=width height=height class=style onclick=onclick valign=valign align=align/>
}

style mixin itemMixin($fontColor, $backgroundColor) {
  background-color: $backgroundColor;
  border: 1px solid #cccccc;
  border-left: 0;
  border-right: 0;
  color: $fontColor;
  display: block;
  font-size: 17px;
  margin-bottom: -1px;
  padding: 12px 10px;
  text-decoration: none;

  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

style itemStyle {
  itemMixin(#000, #fff);
}

style itemPushedStyle {
  itemMixin(#eee, $baseColor);
}

style itemArrowStyle {
  background-image: url($data(mobl/ui/generic/arrow.png));
  background-position: right center;
  background-repeat: no-repeat;
}

style itemDownArrowStyle {
  background-image: url($data(mobl/ui/generic/arrowDown.png));
  background-position: right center;
  background-repeat: no-repeat;
}

control item(style : Style = itemStyle, pushedStyle : Style = itemPushedStyle, onclick : Callback = null, onswipe : Callback = null, hideArrow : Bool = false) {
  var pushed = false
  el@<li class=itemStyle class=onclick && hideArrow == false ? mergeStyles([pushed ? pushedStyle : style, itemArrowStyle]) : (pushed ? pushedStyle : style)
  onswipe=onswipe onclick=onclick ? {
    pushed = true;
    sleep(100);
    async {
      onclick(event);
    }
    sleep(200);
    pushed = false;
  } : null>
    elements()
  </li>
}

control checkBox(b : Bool, label : String = "", onchange : Callback = null) {
  <input type="checkbox" databind=b onclick={} onchange=onchange/>
  " "
  <span databind=label onclick={
    b = !b;
    if(onchange) {
      onchange(null);
    }
  }/>
}

style mixin textFieldStyleMixin($background, $border) {
  display: inline-block;
  -webkit-appearance: none;
  -webkit-box-flex: 100;
  -webkit-rtl-ordering: logical;
  -webkit-user-select: text;
  -webkit-text-size-adjust: 140%;
  -moz-text-size-adjust: 140%;
  -webkit-appearance: textarea;
  background: $background;
  border: $border;
  color: black;
  display: block;
  font-size: 1.2em;
  height: 1.2em;
  padding: 5px;
  margin-left: 0px;
  width: 90%;
  borderRadiusMixin(5px);
}

style textFieldStyle {
  textFieldStyleMixin(#fff -webkit-gradient(linear, 0% 0%, 0% 100%, from(white), to(white)), 0);	// TODO  add corresponding -moz spec
}

style textFieldInvalidStyle {
  textFieldStyleMixin(#fff -webkit-gradient(linear, 0% 0%, 0% 100%, from(#FBB), to(#FAA)), 1px solid red);	// TODO  add corresponding -moz spec
}

style textFieldLabelStyle {
  color: #666;
}

style validationMessageStyle {
  color: red;
}

function alwaysOkValidator(s : String) : String {
  return "";
}

control textField(s : String,
                  placeholder : String = null,
                  label : String = null,
                  inputType : String = "text",
                  validator : Function1<String,String> = null,
                  style : Style = textFieldStyle,
                  invalidStyle : Style = textFieldInvalidStyle,
                  autofocus : Bool = false,
                  autocorrect : Bool = true,
                  autocapitalize : Bool = true,
                  autocomplete : Bool = true,
                  onchange : Callback = null,
                  onkeyup : Callback = null,
                  disabled : Bool = false) {
  when(label) {
    mobl::label(label, style=textFieldLabelStyle)
  }
  when(validator) {
    var temp : String = s
    var identifier = random(999)
    var validationMessage = validator(s)
    script {
      async {
        sleep(200);
        setValidationError(identifier, !validationMessage);
      }
    }

    <input type=inputType class=validationMessage ? invalidStyle : style placeholder=placeholder disabled=disabled databind=temp onchange=onchange onkeyup={
      if(onkeyup) {
        onkeyup(event);
      }
      validationMessage = validator(temp);
      if(!validationMessage) {
        s = temp;
      }
      setValidationError(identifier, !validationMessage);
    } autofocus=autofocus autocorrect=autocorrect autocapitalize=autocapitalize autocomplete=autocomplete/>
    mobl::label(validationMessage, style=validationMessageStyle)
  } else { // no validator, cheap solution
    <input type=inputType class=style placeholder=placeholder databind=s onchange=onchange onkeyup=onkeyup
           autofocus=autofocus autocorrect=autocorrect autocapitalize=autocapitalize disabled=disabled autocomplete=autocomplete/>
  }
}

control emailField(s : String,
                   placeholder : String = null,
                   label : String = null,
                   validator : Function1<String,String> = emailValidator,
                   style : Style = textFieldStyle,
                   invalidStyle : Style = textFieldInvalidStyle,
                   autofocus : Bool = false,
                   onchange : Callback = null,
                   onkeyup : Callback = null) {
  textField(s, placeholder, label, "email", validator, style, invalidStyle, autofocus, false, false, false, onchange, onkeyup)
}

control telField(phoneNumber : String,
                 placeholder : String = null,
                 label : String = null,
                 validator : Function1<String,String> = null,
                 style : Style = textFieldStyle,
                 invalidStyle : Style = textFieldInvalidStyle,
                 autofocus : Bool = false,
                 onchange : Callback = null,
                 onkeyup : Callback = null) {
  textField(phoneNumber, placeholder, label, "tel", validator, style, invalidStyle, autofocus, false, false, false, onchange, onkeyup)
}

control rangeField(n : Num, min : Num = 0, max : Num = 100, step : Num = 1, placeholder : String = null, label : String = null, onchange : Callback = null, onkeyup : Callback = null) {
  when(label) {
    mobl::label(label, style=textFieldLabelStyle)
  }
  <input type="range" databind=n min=min max=max step=step style="width: 99%;" onchange=onchange onkeyup=onkeyup placeholder=placeholder/>
}

control numField(n : Num,
                label : String = null,
                placeholder : String = null,
                validator : Function1<Num,String> = null,
                style : Style = textFieldStyle,
                invalidStyle : Style = textFieldInvalidStyle,
                autofocus : Bool = false,
                step : Num = null,
                min : Num = null,
                max : Num = null,
                onchange : Callback = null,
                onkeyup : Callback = null) {
  /*function validator2(s : String) : String {
    var n2 = parseNum(s);
    var m = validator(n2);
    if(!m) {
      n = n2;
    }
    return m;
  }
  var s = "" + n

  textField(s, placeholder, label, "number", validator2, style, invalidStyle, autofocus, false, false, false, onchange, onkeyup)*/

  function validateNum(n : Num) : String {
    if(Math.isNaN(n)) {
      return _("Not a valid numeric value");
    } else if(max != null && n > max) {
      return _("Number is too high, maximum is: %%", [max]);
    } else if(min != null && n < min) {
      return _("Number is too low, minimum is: %%", [min]);
    } else {
      return "";
    }
  }

  script {
    if(validator == null) {
      validator = validateNum;
    }
  }

  var validationMessage = validator(n)
  when(label) {
    mobl::label(label, style=textFieldLabelStyle)
  }
  <input type="number" class=validationMessage ? invalidStyle : style placeholder=placeholder databind=n onchange=onchange onkeyup={
    validationMessage=validator(n);
    if(onkeyup) onkeyup(event);
  }
    autofocus=autofocus step=step min=min max=max />
  mobl::label(validationMessage, style=validationMessageStyle)
}

control passwordField(s : String, placeholder : String = null, label : String = null, style : Style = textFieldStyle, onchange : Callback = null, onkeyup : Callback = null) {
    when(label) {
    	mobl::label(label, style=textFieldLabelStyle)
  	}
    <input type="password" class=style placeholder=placeholder databind=s onchange=onchange onkeyup=onkeyup onblur={ scrollUp(); }/>
}

style selectFieldStyle {
  display: block;
  width: 100%;
  border: 0;
  font-size: 18px;
  padding: 3px;
}

control selectField(value : String, options : [(String, String)], onchange : Callback = null, style : Style = selectFieldStyle, optionStyle : Style = null) {
  sel@<select class=style onchange={
    value = sel.val();
    if(onchange) {
      onchange(event);
    }
  }>
  list((optionValue, optionDescription) in options) {
    <option databind=optionDescription class=optionStyle value=optionValue selected=value == optionValue ? "selected" : ""/>
  }
  </select>
  script {
    // Hack, moving the options out of the list's span
    sel.append(sel.children().eq(0).children());
  }
}

// Tabs

style tabbarStyle {
  text-align: left;
  font-size: 16px;
  z-index: 3;
  width: 100%;
  //position: fixed;
  border-bottom: 1px solid #444;
  margin-top: 3px;
  margin-bottom: 0;
  background-color: #f0f0f0;
}

style tabbarStyle inActiveTabButtonStyle {
  padding-right: 15px;
  padding-left: 15px;
  padding-top: 10px;
  padding-bottom: 10px;
  margin-left: 5px;
  line-height: 39px;
  height: 39px;
  margin-bottom: 0;
  background-color: white;
  color: black;
  border-top: 1px solid #444;
  border-right: 1px solid #444;
  border-left: 1px solid #444;
  -webkit-border-top-right-radius: 8px;
  -moz-border-radius-topright: 8px;
  -webkit-border-top-left-radius: 8px;
  -moz-border-radius-topleft: 8px;
}

// 92,152,246
style tabbarStyle activeTabButtonStyle {
  background-color: $baseColor;
  color: #fefefe;
  position: relative;
  top: 2px;

  padding-right: 15px;
  padding-left: 15px;
  padding-top: 10px;
  padding-bottom: 10px;
  margin-left: 5px;
  line-height: 37px;
  height: 39px;
  margin-bottom: 0;
  border-top: 1px solid #444;
  border-right: 1px solid #444;
  border-left: 1px solid #444;
  -webkit-border-top-right-radius: 8px;
  -moz-border-radius-topright: 8px;
  -webkit-border-top-left-radius: 8px;
  -moz-border-radius-topleft: 8px;
}

style inActiveTabStyle {
  display: none;
}

style activeTabStyle {
}

@doc "A tabset, takes a list of tuples as argument, e.g. [(\"Tab 1\", \"icon url\", tab1), (\"Tab 2\", \"icon uri\", tab2)] where tab1 and tab2 are controls with no arguments"
control tabSet(tabs : [(String, String, Control)], activeTab : String = null, screenContextId : String = "tabSetContext") {
  script {
    if(activeTab == null) {
      activeTab = tabs[0]._1;
    }
  }
  var s = ""

  block(tabbarStyle) {
    list((tabName, tabIcon, tabControl) in tabs) {
      span(onclick={ activeTab = tabName; }, cssClass=activeTab == tabName ? activeTabButtonStyle : inActiveTabButtonStyle) {
        label(tabName)
      }
    }
  }
  //<div style="height: 39px;"/>
  list((tabName, tabIcon, tabControl) in tabs) {
    block(activeTab == tabName ? activeTabStyle : inActiveTabStyle) {
      screenContext(screenContextId) {
        tabControl()
      }
    }
  }
}

style searchboxStyle {
  background-color: #FFFFFF;
  margin: 0;
  border: 1px solid #999999;
  color: #222222;
  padding: 10px 6px;
}

style searchBoxInputStyle {
  display: inline-block;
  -webkit-appearance: none;
  -webkit-box-flex: 100;
  -webkit-rtl-ordering: logical;
  -webkit-user-select: text;
  -webkit-text-size-adjust: 140%;
  -moz-text-size-adjust: 140%;
  -webkit-appearance: textarea;
  border: 0;
  color: black;
  display: block;
  font-size: 1.2em;
  height: 1.2em;
  //padding-left: 23px;
  padding: 0 0 0 38px;
  margin-left: 0px;
  width: 100%;

  background-image: url($data(mobl/ui/generic/search.png));
  background-repeat: no-repeat;
  background-position: left center;
}

control searchBox(s : String, placeholder : String = _("Search term"), onsearch : Callback = null, onkeyup : Callback = null) {
  <div class=searchboxStyle>
    <input type="search" class=searchBoxInputStyle placeholder=placeholder databind=s onchange=onsearch onkeyup=onkeyup autocorrect=false autocapitalize=false autocomplete=false/>
  </div>
}

// CONTEXT MENU

style contextMenuStyle {
  position: absolute;
}

style mixin contextMenuButtonStyleMixin($fromColor, $toColor) {
  font-family: Arial, Helvetica, sans-serif;
  text-shadow: $textButtonShadowColor 0px 1px 0px;
  font-weight: bold;
  text-align: center;
  padding: 0.5em 0.5em 0.5em 0.5em;
  margin: 0.1em;
  line-height: 2em;
  color: black;
  boxShadowMixin(0px, 0px, 3px, #777777);
  borderRadiusMixin(5px);
  backgroundGradientMixin($fromColor, $toColor);
}

style contextMenuStyle buttonStyle {
  contextMenuButtonStyleMixin($buttonFromColor, $buttonToColor);
}

style contextMenuStyle buttonPushedStyle {
  contextMenuButtonStyleMixin($buttonPushedFromColor, $buttonPushedToColor);
}

control contextMenu() {
  menu@<div class=contextMenuStyle>
    elements()
  </div>
  script {
    menu.hide();
  }
  img@<img src=$data(mobl/ui/generic/contextmenu.png) style="float: right;" onclick={
    var target = img.parent();
    target.css("position", "relative");
    img.hide();
    menu.css("right", "5px");
    menu.css("top", "5px");
    menu.show();
    sleep(500);
    $("body").bind("tap", removeMenu);
  }/>
  function removeMenu(evt : Dynamic) {
    menu.hide();
    img.show();
    $("body").unbind("tap", removeMenu);
  }
}

// Higher level controls

control masterDetail(items : Collection<Dynamic>, masterItem : Control1<Dynamic>, detail : Control1<Dynamic>) {
  group {
    list(it in items) {
      item(onclick={ detailScreen(it, detail); }) {
        masterItem(it)
      }
    }
  }
}

screen detailScreen(it : Dynamic, detail : Control1<Dynamic>) {
  header(_("Detail")) {
    backButton(_("Back"), onclick={ screen return; })
  }
  detail(it)
}

style selectedItemStyle {
  itemMixin(#000, #ccc);
}

@when window.innerWidth > 500
control masterDetail(items : Collection<?>, masterItem : Control1<Dynamic>, detail : Control1<Dynamic>) {
  var current : Dynamic = items.one()
  <div width="100%">
    <div style="float:left; width:33%; position:relative; border-right: solid 1px #cccccc;">
      group {
        list(it in items) {
          when(it == current) {
            item(style=selectedItemStyle) {
              masterItem(it)
            }
          } else {
            item(hideArrow=true, onclick={ current = it; scrollUp();}) {
              masterItem(it)
            }
          }
        }
      }
    </div>
    <div style="float:left; width:66.5%; position:relative; margin-left: 0.5%;">
      when(current) {
        detail(current)
      } else {
        label(_("Select an item on the left"))
      }
    </div>
  </div>
}

control zoomList(coll : Collection<?>, listCtrl : Control1<?>, zoomCtrl : Control1<?>) {
  var selected : ? = null
  group {
    list(it in coll) {
      when(it == selected) {
        item { zoomCtrl(it) }
      } else {
        item(onclick={ selected = it; }, hideArrow=true) {
          listCtrl(it)
        }
      }
    }
  }
}

style loadMoreStyle {
  background-color: #ffffff;
  border: 1px solid #cccccc;
  border-left: 0;
  border-right: 0;
  color: #888;
  display: block;
  font-size: 17px;
  text-align: center;
  margin-bottom: -1px;
  padding: 12px 10px;
  font-weight: bold;
  white-space: nowrap;
  -webkit-border-bottom-left-radius: 20px;
  -moz-border-radius-bottomleft: 20px;
  -webkit-border-bottom-right-radius: 20px;
  -moz-border-radius-bottomright: 20px;
}

control stagedList(coll : Collection<?>, listCtrl : Control1<?>, initialItems : Num = 10, step : Num = 10, moreLabel : String = _("More"), moreStyle : Style = loadMoreStyle) {
  var n : Num = initialItems
  var total = coll.count()
  list(it in coll limit n) {
    listCtrl(it)
  }
  when(n < total) {
    block(moreStyle, onclick={
        n = n + step;
      }) {
      label(moreLabel)
    }
  }
}

control markableList(items : [(Bool, ?)]) {
  group {
    list((checked, it) in items) {
      item {
        checkBox(checked, label=it)
      }
    }
  }
}

screen selectList(title : String, coll : Collection<?>, doneButtonLabel : String = _("Done")) : [?] {
  var items = Array<(Bool, ?)>()
  script {
    foreach(it in coll) {
      items.push((false, it));
    }
  }
  header(title) {
    backButton(onclick={
      return null;
    })
    button(doneButtonLabel, onclick={
      var selected = Array<?>();
      foreach((checked, it) in items) {
        if(checked) {
          selected.push(it);
        }
      }
      screen return selected;
    })
  }
  markableList(items)
}

control searchList(Ent : Type<Entity<?>>, masterItem : Control1<?>, detailItem : Control1<?>, resultLimit : Num = 10, searchTermPlaceholder : String = _("Search term")) {
  var phrase = ""
  searchBox(phrase, placeholder=searchTermPlaceholder)
  masterDetail(Ent.searchPrefix(phrase) limit resultLimit, masterItem, detailItem)
}

style progressStyle {
    -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    background-color: rgba(0,0,0,0.7);
    color: white;
    font-size: 2em;
    line-height: 2em;
    font-weight: bold;
    left: 10%;
    margin: 0 auto;
    position: fixed;
    text-align: center;
    top: 40%;
    width: 80%;
    z-index: 99;
}

function startLoading(loadingMessage : String = "Loading...", style : Style = progressStyle) {
  var loading = $("<div id='progress' class='" + style + "'>" + loadingMessage + "</div>");
  $("body").prepend(loading);
}

function startLoading2(loadingMessage : String = "Loading...", style : Style = progressStyle) {
  var loading = $("<div id='progress' class='" + style + "'>" + loadingMessage + "</div>");
  $("body").append(loading);
}

function endLoading() {
  $("#progress").remove();
}

// Floating box
<javascript>
__ns.floatBox = function(top, right, bottom, left, elements, callback) {
  var root928 = $("<span>");
  var node280 = $("<div style=\"position: absolute;\">");

  var nodes681 = $("<span>");
  node280.append(nodes681);
  mobl.ref(elements).addEventListener('change', function() {
    renderControl102();
  });

  function renderControl102() {
    (elements)(function(elements, callback) {
      var root929 = $("<span>");
      callback(root929); return;
    }, function(node) {
      var oldNodes = nodes681;
      nodes681 = node.contents();
      oldNodes.replaceWith(nodes681);
    });
  }
  renderControl102();
  root928.append(node280);
  var box = node280;
  if(top.get() !== null) box.css("top", "" + top.get() + "px");
  if(right.get() !== null) box.css("right", "" + right.get() + "px");
  if(bottom.get() !== null) box.css("top", "" + (window.pageYOffset + window.innerHeight - box.outerHeight() - bottom.get()) + "px");
  if(left.get() !== null) box.css("left", "" + left.get() + "px");
  function updateLocation() {
    if(top.get() !== null) {
      box.css("top", "" + (window.pageYOffset + top.get()) + "px");
    }
    if(bottom.get() !== null) {
      box.css("top", "" + (window.pageYOffset + window.innerHeight - box.outerHeight() - bottom.get()) + "px");
    }
  }
  $(window).bind('scroll', updateLocation);
  $(window).bind('resize', updateLocation);

  callback(root928); return;
};
</javascript>


external control floatBox(top : Num = null, right : Num = null, bottom : Num = null, left : Num = null)


 /*{
  var id = random(9999)
  <div id="floatBox"+id style="position: absolute;">
    elements()
  </div>
  script {
    setupFloatBox(id, top, right, bottom, left);
  }
}*/


//resource mobl/ui/generic/accordion-down.png
//resource mobl/ui/generic/accordion-right.png

style accordionStyle {
  width: 100%;
}

style accordionStyle activeSectionHeaderStyle {
  background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#eee),
    to(#aaa) );
  background: -moz-linear-gradient(top, #5c98f6, #3440e4);
  padding: 0;
  height: 1.9em;
  font-size: 1em;
  line-height: 1.9em;
  font-weight: bold;
  text-align: left;
  color: #333;
  font-weight: bold;
  margin: 0;
  z-index: 2;
  width: 100%;
  display: block;
}

style accordionStyle inActiveSectionHeaderStyle {
  background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#eee),
    to(#aaa) );
  background: -moz-linear-gradient(top, #5c98f6, #3440e4);
  padding: 0;
  height: 1.9em;
  font-size: 1em;
  line-height: 1.9em;
  font-weight: bold;
  text-align: left;
  color: #333;
  font-weight: bold;
  margin: 0;
  z-index: 2;
  width: 100%;
  display: block;
}

style accordionStyle activeSectionHeaderStyle:before {
  content: url($data(mobl/ui/generic/accordion-down.png));
}

style accordionStyle inActiveSectionHeaderStyle:before {
  content: url($data(mobl/ui/generic/accordion-right.png));
}

style accordionStyle inActiveSectionStyle {
  display: none;
}

style accordionStyle activeSectionStyle {
  display: block;
}

control accordion(sections : [(String, Control)], activeSection : String = null) {
  var activeSection : String = activeSection ? activeSection : sections.get(0)._1

  block(accordionStyle) {
    list((sectionName, sectionControl) in sections) {
      span(onclick={ activeSection = sectionName; }, cssClass=activeSection == sectionName ? activeSectionHeaderStyle : inActiveSectionHeaderStyle) {
        label(sectionName)
      }
      block(activeSection == sectionName ? activeSectionStyle : inActiveSectionStyle) {
        sectionControl()
      }
    }
  }
}

style tableStyle {
  padding: 8px 10px 8px 10px;
  width: 100%;
  border-spacing: 0;
}

style tdStyle {
  padding: 8px;
}

style trStyle {
  padding: 8px;
}

style trStyle:nth-child(even) {
  background: #eeeeee;
}

style trStyle:nth-child(odd) {
  background: #ffffff;
}

style trStyle:first-child tdStyle:first-child {
  -webkit-border-top-left-radius: 8px;
  -moz-border-radius-topleft: 8px;
  border-left: 1px solid #000;
  border-top: 1px solid #000;
}

style trStyle:first-child tdStyle:last-child {
  -webkit-border-top-right-radius: 8px;
  -moz-border-radius-topright: 8px;
  border-right: 1px solid #000;
  border-top: 1px solid #000;
}

style trStyle:last-child tdStyle:first-child {
  -webkit-border-bottom-left-radius: 8px;
  -moz-border-radius-bottomleft: 8px;
  border-left: 1px solid #000;
  border-bottom: 1px solid #000;
}

style trStyle:last-child tdStyle:last-child {
  -webkit-border-bottom-right-radius: 8px;
  -moz-border-radius-bottomright: 8px;
  border-right: 1px solid #000;
  border-bottom: 1px solid #000;
}

style trStyle tdStyle:first-child {
  border-left: 1px solid #000;
}

style trStyle tdStyle:last-child {
  border-right: 1px solid #000;
}

style trStyle:first-child tdStyle {
  border-top: 1px solid #000;
}

style trStyle:last-child tdStyle {
  border-bottom: 1px solid #000;
}


@doc "Renders a table, use row { } for rows and cell { } for cells"
control table(style : Style = tableStyle) {
  <table class=style>elements()</table>
}

control row(style : Style = trStyle) {
  <tr class=style>elements()</tr>
}

control cell(width : String = null, style : Style = tdStyle) {
  <td width=width class=style>elements()</td>
}

control col(width : String = null, style : Style = tdStyle) {
  <td width=width class=style>elements()</td>
}

control headerCol(width : String = null, style : Style = tdStyle) {
  <td width=width class=style><strong>elements()</strong></td>
}

// SCROLLERS, disabled ATM
external sync function scrollUp() : void
/*
external sync function setupScrollers() : void

control scroller(height : Num = 200) {
  <div class="scroller">
    elements()
  </div>
  script {
    setupScrollers();
  }
}
*/
<javascript>
setTimeout(function() {
  scrollTo(0, -1);
}, 250);

__ns.scrollUp = function() {
  scrollTo(0, 0);
};

__ns.setupScrollers = function() {
  setTimeout(function() {
    var allScrollers = $("div.scroller");
    for(var i = 0; i < allScrollers.length; i++) {
      var scroller = allScrollers.eq(i);
      if(!scroller.data("scroller")) {
         scroller.data("scroller", new TouchScroll(scroller[0], {elastic: true}));
      }
    }
  }, 250);
};

/*setInterval(function() {
  var allScrollers = $("div.scroller");
  for(var i = 0; i < allScrollers.length; i++) {
    var scroller = allScrollers.eq(i).data("scroller");
    if(scroller) {
       scroller.setupScroller();
    }
  }
}, 1000);*/
</javascript>
